package com.tien;

import com.tien.data.MessageCode;
import com.tien.data.NetworkMessage;
import com.tien.exception.*;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.logging.Logger;

public class Client{
    private final Logger LOGGER = Logger.getLogger(this.getClass().getName());
    // Login
    private final String login;

    // Network
    private Socket socket;
    private InputStream inputStream;
    private OutputStream outputStream;

    public Client(String login){
        this.login = login;
    }

    public void connect(InetAddress address, int port) throws ConnectionException {
        try {
            this.socket = new Socket(address, port);
            this.inputStream = socket.getInputStream();
            this.outputStream = socket.getOutputStream();
        } catch (IOException e) {
            throw new ConnectionException("Client fail connection", e);
        }
    }

    private void send(byte[] addressee, byte[] message, boolean isLogin) throws UnwritableOutputStreamException, UnreadableInputStreamException, EmptyNetMessageException {
        sendMeth((byte) (isLogin
                ? MessageCode.LOGIN_CODE.getValue()
                : MessageCode.WRITE_CODE.getValue()), message, addressee);
    }

    public void send(byte[] addressee, byte[] message) throws UnwritableOutputStreamException {
        sendMeth((byte) MessageCode.WRITE_CODE.getValue(), message, addressee);
    }

    private void sendMeth(byte code, byte[] message, byte[] addressee) throws UnwritableOutputStreamException {
        NetworkMessage networkMessage = new NetworkMessage();
        networkMessage.addCode(code);
        networkMessage.addLogin(login.getBytes());
        networkMessage.addAddressee(addressee);
        networkMessage.addMessage(message);
        try {
            outputStream.write(networkMessage.toSend());
        } catch (IOException e) {
            throw new UnwritableOutputStreamException("Can't write to output stream");
        }
    }

    private NetworkMessage readAnswer() throws UnreadableInputStreamException, EmptyNetMessageException {
        return new NetworkMessage(inputStream);
    }

    public MessageCode login() {
        try {
            byte[] bLogin = login.getBytes(StandardCharsets.UTF_8);
            send(bLogin, new byte[5],true);

            MessageCode messageCode = MessageCode.getEnumByValue(readAnswer().getCode());
            return switch (messageCode) {
                case NORMAL_CODE -> MessageCode.NORMAL_CODE;
                case LOST_CONNECTION -> MessageCode.LOST_CONNECTION;
                default -> throw new IllegalStateException("Unexpected value: " + messageCode);
            };
        } catch (UnwritableOutputStreamException e) {
            throw new RuntimeException(e);
        } catch (UnreadableInputStreamException e) {
            throw new RuntimeException(e);
        } catch (EmptyNetMessageException e) {
            throw new RuntimeException(e);
        }
    }

    public void disconnect(){
        try {
            socket.close();
        } catch (IOException e) {
            throw new DisconnectException("com.tien.Client fail disconnect", e);
        }
    }

    public void stop() throws ClientStopException {
        try {
            socket.close();
        } catch (IOException e) {
            throw new ClientStopException("Client stop exception" ,e);
        }
    }

    public Socket getSocket() throws ConnectionException {
        if (socket.isConnected())
            return this.socket;
        else
            throw new ConnectionException("Trying to get an unconnected socket");
    }
}
